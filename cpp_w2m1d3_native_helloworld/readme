Alright, let's create a simple "Hello World" native module that prints to the Android system logs during boot. This will involve creating a native service and integrating it into the AOSP boot process.

1. Create the Native Service (C++):

C++

// packages/services/native/helloworld/helloworld.cpp
#include <utils/Log.h>

#define TAG "HelloWorld"

extern "C" void hello_world_init() {
    ALOGI("Hello, World! From native service.");
}
2. Create the Android.bp Build File:

Code snippet

// packages/services/native/helloworld/Android.bp
cc_library {
    name: "libhelloworld",
    srcs: ["helloworld.cpp"],
    include_dirs: ["system/core/include"],
    cflags: ["-Wall", "-Werror"],
    shared_libs: ["liblog"],
}

cc_binary {
    name: "helloworld",
    srcs: ["helloworld_main.cpp"],
    shared_libs: ["libhelloworld", "liblog"],
    init_rc: ["helloworld.rc"],
    cflags: ["-Wall", "-Werror"],
}
C++

// packages/services/native/helloworld/helloworld_main.cpp

extern "C" void hello_world_init();

int main(){
    hello_world_init();
    return 0;
}
3. Create the init.rc File:

Code snippet

# packages/services/native/helloworld/helloworld.rc
service helloworld /system/bin/helloworld
    class core
    user system
    group system
    oneshot
service helloworld: Defines a service named "helloworld."
/system/bin/helloworld: Specifies the path to the executable.
class core: Places the service in the "core" class, which starts during boot.
user system, group system: Sets the user and group permissions.
oneshot: Ensures the service runs only once.
4. SELinux Policies (packages/services/native/helloworld/helloworld.te):

Code snippet

type helloworld_exec, exec_type, file_type, system_file_type;
type helloworld_service, service_manager_type;

init_daemon_domain(helloworld_service)

allow helloworld_service self:process { getattr sigchld signal };
allow helloworld_service self:capability { sys_resource };
allow helloworld_service self:process setrlimit;

allow helloworld_service system_server:binder call;
allow helloworld_service logd:sock_file write;
allow helloworld_service logd:unix_stream_socket connectto;
allow helloworld_service system_file:file execute;

allow init helloworld_exec:file execute;
These policies allow the "helloworld" service to execute and write to the system logs.
5. Add the SELinux policy to file_contexts

Append the following line to system/sepolicy/precompiled_sepolicy or system/sepolicy/private/file_contexts:

/system/bin/helloworld u:object_r:helloworld_exec:s0
6. Integrate into the Build:

Add the helloworld module to your device's device.mk or product.mk file:
Makefile

# device/your_device/device.mk or product/your_product/product.mk
PRODUCT_PACKAGES += \
    helloworld
7. Build and Flash:

Build the AOSP image:
Bash

source build/envsetup.sh
lunch your_device_build_target
make -j
Flash the system image to your device.
8. Verify:

After the device boots, use adb logcat to check the system logs. You should see the "Hello, World!" message:
Bash

adb logcat | grep HelloWorld
Important Notes:

SELinux policies are crucial. Incorrect policies can prevent your module from running.
The exact paths and build targets may vary depending on your AOSP version and device.
This is a basic example. For more complex native services, you'll need to handle service lifecycle events, inter-process communication (IPC), and other system-level interactions.
It is very important that the .te files, and file_contexts, match the name of the executable.
This example prints to logcat. For production code, make sure to handle errors, and follow proper coding practices.